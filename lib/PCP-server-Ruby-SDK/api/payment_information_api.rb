=begin
#Commerce Platform API

#RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 

The version of the OpenAPI document: 1.8.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module PCPServerSDK
  class PaymentInformationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Payment Information
    # Creates a new Payment Information for the given Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_information_request [PaymentInformationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PaymentInformationResponse]
    def create_payment_information(merchant_id, commerce_case_id, checkout_id, payment_information_request, opts = {})
      data, _status_code, _headers = create_payment_information_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_information_request, opts)
      data
    end

    # Create a Payment Information
    # Creates a new Payment Information for the given Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_information_request [PaymentInformationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentInformationResponse, Integer, Hash)>] PaymentInformationResponse data, response status code and response headers
    def create_payment_information_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_information_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentInformationApi.create_payment_information ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentInformationApi.create_payment_information"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentInformationApi.create_payment_information, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentInformationApi.create_payment_information, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling PaymentInformationApi.create_payment_information"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentInformationApi.create_payment_information"
      end
      # verify the required parameter 'payment_information_request' is set
      if @api_client.config.client_side_validation && payment_information_request.nil?
        fail ArgumentError, "Missing the required parameter 'payment_information_request' when calling PaymentInformationApi.create_payment_information"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payment_information_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentInformationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentInformationApi.create_payment_information",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentInformationApi#create_payment_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Payment Information
    # This endpoint can be used to get a paymentInformation of a Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_information_id [String] Unique identifier of a paymentInformation
    # @param [Hash] opts the optional parameters
    # @return [PaymentInformationResponse]
    def get_payment_information(merchant_id, commerce_case_id, checkout_id, payment_information_id, opts = {})
      data, _status_code, _headers = get_payment_information_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_information_id, opts)
      data
    end

    # Get a Payment Information
    # This endpoint can be used to get a paymentInformation of a Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_information_id [String] Unique identifier of a paymentInformation
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentInformationResponse, Integer, Hash)>] PaymentInformationResponse data, response status code and response headers
    def get_payment_information_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_information_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentInformationApi.get_payment_information ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentInformationApi.get_payment_information"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentInformationApi.get_payment_information, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentInformationApi.get_payment_information, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling PaymentInformationApi.get_payment_information"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentInformationApi.get_payment_information"
      end
      # verify the required parameter 'payment_information_id' is set
      if @api_client.config.client_side_validation && payment_information_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_information_id' when calling PaymentInformationApi.get_payment_information"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-information/{paymentInformationId}'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'paymentInformationId' + '}', CGI.escape(payment_information_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentInformationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentInformationApi.get_payment_information",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentInformationApi#get_payment_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
