=begin
#Commerce Platform API

#RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 

The version of the OpenAPI document: 1.8.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module PCPServerSDK
  class CheckoutApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a Checkout to an existing Commerce Case
    # This endpoint can be used to add a new Checkout in combination with an Order to an existing Commerce Case. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckout Action or Payment Execution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param create_checkout_request [CreateCheckoutRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateCheckoutResponse]
    def create_checkout(merchant_id, commerce_case_id, create_checkout_request, opts = {})
      data, _status_code, _headers = create_checkout_with_http_info(merchant_id, commerce_case_id, create_checkout_request, opts)
      data
    end

    # Add a Checkout to an existing Commerce Case
    # This endpoint can be used to add a new Checkout in combination with an Order to an existing Commerce Case. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckout Action or Payment Execution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param create_checkout_request [CreateCheckoutRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCheckoutResponse, Integer, Hash)>] CreateCheckoutResponse data, response status code and response headers
    def create_checkout_with_http_info(merchant_id, commerce_case_id, create_checkout_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutApi.create_checkout ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CheckoutApi.create_checkout"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.create_checkout, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.create_checkout, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling CheckoutApi.create_checkout"
      end
      # verify the required parameter 'create_checkout_request' is set
      if @api_client.config.client_side_validation && create_checkout_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_checkout_request' when calling CheckoutApi.create_checkout"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_checkout_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCheckoutResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CheckoutApi.create_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#create_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Checkout
    # This endpoint can be used to delete an unused Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_checkout(merchant_id, commerce_case_id, checkout_id, opts = {})
      delete_checkout_with_http_info(merchant_id, commerce_case_id, checkout_id, opts)
      nil
    end

    # Delete a Checkout
    # This endpoint can be used to delete an unused Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_checkout_with_http_info(merchant_id, commerce_case_id, checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutApi.delete_checkout ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CheckoutApi.delete_checkout"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.delete_checkout, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.delete_checkout, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling CheckoutApi.delete_checkout"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling CheckoutApi.delete_checkout"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CheckoutApi.delete_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#delete_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Checkout Details
    # This endpoint can be used to get a Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @return [CheckoutResponse]
    def get_checkout(merchant_id, commerce_case_id, checkout_id, opts = {})
      data, _status_code, _headers = get_checkout_with_http_info(merchant_id, commerce_case_id, checkout_id, opts)
      data
    end

    # Get Checkout Details
    # This endpoint can be used to get a Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckoutResponse, Integer, Hash)>] CheckoutResponse data, response status code and response headers
    def get_checkout_with_http_info(merchant_id, commerce_case_id, checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutApi.get_checkout ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CheckoutApi.get_checkout"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.get_checkout, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.get_checkout, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling CheckoutApi.get_checkout"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling CheckoutApi.get_checkout"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CheckoutApi.get_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#get_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Checkouts based on Search Parameters
    # This endpoint will provide a list of Checkouts based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. Only up to the first 10,000 results will be returned. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to load Items (Checkouts or Commerce-Cases, depending on the context) starting with 0. (default to 0)
    # @option opts [Integer] :size The number of Items (Checkouts or Commerce-Cases, depending on the context) loaded per page (default to 25)
    # @option opts [Time] :from_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. 
    # @option opts [Time] :to_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. 
    # @option opts [Integer] :from_checkout_amount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_checkout_amount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_open_amount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_open_amount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_collected_amount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_collected_amount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_cancelled_amount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_cancelled_amount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_refund_amount Minimum refunded amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_refund_amount Maximum refunded amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_chargeback_amount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_chargeback_amount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [String] :checkout_id Unique identifier of a Checkout
    # @option opts [String] :merchant_reference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes.
    # @option opts [String] :merchant_customer_id Unique identifier for the customer.
    # @option opts [Array<Integer>] :include_payment_product_id Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned.
    # @option opts [Array<StatusCheckout>] :include_checkout_status Filter your results by Checkout status so that only Checkouts with the specified statuses are returned.
    # @option opts [Array<ExtendedCheckoutStatus>] :include_extended_checkout_status Filter your results by extended Checkout status so that only Checkouts with the specified statuses are returned.
    # @option opts [Array<PaymentChannel>] :include_payment_channel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned.
    # @option opts [String] :payment_reference Filter your results by the merchantReference of the paymentExecution or paymentInformation.
    # @option opts [String] :payment_id Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment.
    # @option opts [String] :first_name Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address.
    # @option opts [String] :surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address.
    # @option opts [String] :email Filter your results by the customer email address.
    # @option opts [String] :phone_number Filter your results by the customer phone number.
    # @option opts [String] :date_of_birth Filter your results by the date of birth. Format YYYYMMDD
    # @option opts [String] :company_information Filter your results by the name of the company.
    # @return [CheckoutsResponse]
    def get_checkouts(merchant_id, opts = {})
      data, _status_code, _headers = get_checkouts_with_http_info(merchant_id, opts)
      data
    end

    # Get a list of Checkouts based on Search Parameters
    # This endpoint will provide a list of Checkouts based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. Only up to the first 10,000 results will be returned. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to load Items (Checkouts or Commerce-Cases, depending on the context) starting with 0. (default to 0)
    # @option opts [Integer] :size The number of Items (Checkouts or Commerce-Cases, depending on the context) loaded per page (default to 25)
    # @option opts [Time] :from_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. 
    # @option opts [Time] :to_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. 
    # @option opts [Integer] :from_checkout_amount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_checkout_amount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_open_amount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_open_amount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_collected_amount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_collected_amount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_cancelled_amount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_cancelled_amount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_refund_amount Minimum refunded amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_refund_amount Maximum refunded amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :from_chargeback_amount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [Integer] :to_chargeback_amount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals.
    # @option opts [String] :checkout_id Unique identifier of a Checkout
    # @option opts [String] :merchant_reference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes.
    # @option opts [String] :merchant_customer_id Unique identifier for the customer.
    # @option opts [Array<Integer>] :include_payment_product_id Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned.
    # @option opts [Array<StatusCheckout>] :include_checkout_status Filter your results by Checkout status so that only Checkouts with the specified statuses are returned.
    # @option opts [Array<ExtendedCheckoutStatus>] :include_extended_checkout_status Filter your results by extended Checkout status so that only Checkouts with the specified statuses are returned.
    # @option opts [Array<PaymentChannel>] :include_payment_channel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned.
    # @option opts [String] :payment_reference Filter your results by the merchantReference of the paymentExecution or paymentInformation.
    # @option opts [String] :payment_id Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment.
    # @option opts [String] :first_name Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address.
    # @option opts [String] :surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address.
    # @option opts [String] :email Filter your results by the customer email address.
    # @option opts [String] :phone_number Filter your results by the customer phone number.
    # @option opts [String] :date_of_birth Filter your results by the date of birth. Format YYYYMMDD
    # @option opts [String] :company_information Filter your results by the name of the company.
    # @return [Array<(CheckoutsResponse, Integer, Hash)>] CheckoutsResponse data, response status code and response headers
    def get_checkouts_with_http_info(merchant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutApi.get_checkouts ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CheckoutApi.get_checkouts"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.get_checkouts, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.get_checkouts, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_checkout_amount'].nil? && opts[:'from_checkout_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"from_checkout_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_checkout_amount'].nil? && opts[:'from_checkout_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"from_checkout_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_checkout_amount'].nil? && opts[:'to_checkout_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"to_checkout_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_checkout_amount'].nil? && opts[:'to_checkout_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"to_checkout_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_open_amount'].nil? && opts[:'from_open_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"from_open_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_open_amount'].nil? && opts[:'from_open_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"from_open_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_open_amount'].nil? && opts[:'to_open_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"to_open_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_open_amount'].nil? && opts[:'to_open_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"to_open_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_collected_amount'].nil? && opts[:'from_collected_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"from_collected_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_collected_amount'].nil? && opts[:'from_collected_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"from_collected_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_collected_amount'].nil? && opts[:'to_collected_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"to_collected_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_collected_amount'].nil? && opts[:'to_collected_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"to_collected_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_cancelled_amount'].nil? && opts[:'from_cancelled_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"from_cancelled_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_cancelled_amount'].nil? && opts[:'from_cancelled_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"from_cancelled_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_cancelled_amount'].nil? && opts[:'to_cancelled_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"to_cancelled_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_cancelled_amount'].nil? && opts[:'to_cancelled_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"to_cancelled_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_refund_amount'].nil? && opts[:'from_refund_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"from_refund_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_refund_amount'].nil? && opts[:'from_refund_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"from_refund_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_refund_amount'].nil? && opts[:'to_refund_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"to_refund_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_refund_amount'].nil? && opts[:'to_refund_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"to_refund_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_chargeback_amount'].nil? && opts[:'from_chargeback_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"from_chargeback_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'from_chargeback_amount'].nil? && opts[:'from_chargeback_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"from_chargeback_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_chargeback_amount'].nil? && opts[:'to_chargeback_amount'] > 999999999999
        fail ArgumentError, 'invalid value for "opts[:"to_chargeback_amount"]" when calling CheckoutApi.get_checkouts, must be smaller than or equal to 999999999999.'
      end

      if @api_client.config.client_side_validation && !opts[:'to_chargeback_amount'].nil? && opts[:'to_chargeback_amount'] < 0
        fail ArgumentError, 'invalid value for "opts[:"to_chargeback_amount"]" when calling CheckoutApi.get_checkouts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'merchant_reference'].nil? && opts[:'merchant_reference'].to_s.length > 40
        fail ArgumentError, 'invalid value for "opts[:"merchant_reference"]" when calling CheckoutApi.get_checkouts, the character length must be smaller than or equal to 40.'
      end

      if @api_client.config.client_side_validation && !opts[:'merchant_customer_id'].nil? && opts[:'merchant_customer_id'].to_s.length > 20
        fail ArgumentError, 'invalid value for "opts[:"merchant_customer_id"]" when calling CheckoutApi.get_checkouts, the character length must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && !opts[:'date_of_birth'].nil? && opts[:'date_of_birth'].to_s.length > 8
        fail ArgumentError, 'invalid value for "opts[:"date_of_birth"]" when calling CheckoutApi.get_checkouts, the character length must be smaller than or equal to 8.'
      end

      pattern = Regexp.new(/^((19|20|21)\d{6})?$/)
      if @api_client.config.client_side_validation && !opts[:'date_of_birth'].nil? && opts[:'date_of_birth'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"date_of_birth\"]' when calling CheckoutApi.get_checkouts, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v1/{merchantId}/checkouts'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'fromCheckoutAmount'] = opts[:'from_checkout_amount'] if !opts[:'from_checkout_amount'].nil?
      query_params[:'toCheckoutAmount'] = opts[:'to_checkout_amount'] if !opts[:'to_checkout_amount'].nil?
      query_params[:'fromOpenAmount'] = opts[:'from_open_amount'] if !opts[:'from_open_amount'].nil?
      query_params[:'toOpenAmount'] = opts[:'to_open_amount'] if !opts[:'to_open_amount'].nil?
      query_params[:'fromCollectedAmount'] = opts[:'from_collected_amount'] if !opts[:'from_collected_amount'].nil?
      query_params[:'toCollectedAmount'] = opts[:'to_collected_amount'] if !opts[:'to_collected_amount'].nil?
      query_params[:'fromCancelledAmount'] = opts[:'from_cancelled_amount'] if !opts[:'from_cancelled_amount'].nil?
      query_params[:'toCancelledAmount'] = opts[:'to_cancelled_amount'] if !opts[:'to_cancelled_amount'].nil?
      query_params[:'fromRefundAmount'] = opts[:'from_refund_amount'] if !opts[:'from_refund_amount'].nil?
      query_params[:'toRefundAmount'] = opts[:'to_refund_amount'] if !opts[:'to_refund_amount'].nil?
      query_params[:'fromChargebackAmount'] = opts[:'from_chargeback_amount'] if !opts[:'from_chargeback_amount'].nil?
      query_params[:'toChargebackAmount'] = opts[:'to_chargeback_amount'] if !opts[:'to_chargeback_amount'].nil?
      query_params[:'checkoutId'] = opts[:'checkout_id'] if !opts[:'checkout_id'].nil?
      query_params[:'merchantReference'] = opts[:'merchant_reference'] if !opts[:'merchant_reference'].nil?
      query_params[:'merchantCustomerId'] = opts[:'merchant_customer_id'] if !opts[:'merchant_customer_id'].nil?
      query_params[:'includePaymentProductId'] = @api_client.build_collection_param(opts[:'include_payment_product_id'], :multi) if !opts[:'include_payment_product_id'].nil?
      query_params[:'includeCheckoutStatus'] = @api_client.build_collection_param(opts[:'include_checkout_status'], :multi) if !opts[:'include_checkout_status'].nil?
      query_params[:'includeExtendedCheckoutStatus'] = @api_client.build_collection_param(opts[:'include_extended_checkout_status'], :multi) if !opts[:'include_extended_checkout_status'].nil?
      query_params[:'includePaymentChannel'] = @api_client.build_collection_param(opts[:'include_payment_channel'], :multi) if !opts[:'include_payment_channel'].nil?
      query_params[:'paymentReference'] = opts[:'payment_reference'] if !opts[:'payment_reference'].nil?
      query_params[:'paymentId'] = opts[:'payment_id'] if !opts[:'payment_id'].nil?
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'surname'] = opts[:'surname'] if !opts[:'surname'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'phoneNumber'] = opts[:'phone_number'] if !opts[:'phone_number'].nil?
      query_params[:'dateOfBirth'] = opts[:'date_of_birth'] if !opts[:'date_of_birth'].nil?
      query_params[:'companyInformation'] = opts[:'company_information'] if !opts[:'company_information'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CheckoutApi.get_checkouts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#get_checkouts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify a Checkout
    # This endpoint can be used to update or modify the data of a Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param patch_checkout_request [PatchCheckoutRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_checkout(merchant_id, commerce_case_id, checkout_id, patch_checkout_request, opts = {})
      update_checkout_with_http_info(merchant_id, commerce_case_id, checkout_id, patch_checkout_request, opts)
      nil
    end

    # Modify a Checkout
    # This endpoint can be used to update or modify the data of a Checkout.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param patch_checkout_request [PatchCheckoutRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_checkout_with_http_info(merchant_id, commerce_case_id, checkout_id, patch_checkout_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CheckoutApi.update_checkout ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CheckoutApi.update_checkout"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.update_checkout, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CheckoutApi.update_checkout, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling CheckoutApi.update_checkout"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling CheckoutApi.update_checkout"
      end
      # verify the required parameter 'patch_checkout_request' is set
      if @api_client.config.client_side_validation && patch_checkout_request.nil?
        fail ArgumentError, "Missing the required parameter 'patch_checkout_request' when calling CheckoutApi.update_checkout"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_checkout_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CheckoutApi.update_checkout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CheckoutApi#update_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
