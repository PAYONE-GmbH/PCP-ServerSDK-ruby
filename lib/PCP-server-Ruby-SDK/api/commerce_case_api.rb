=begin
#Commerce Platform API

#RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 

The version of the OpenAPI document: 1.8.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module PCPServerSDK
  class CommerceCaseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Commerce Case
    # This endpoint can be used to create a Commerce Case in combination with a Checkout and an Order. A Commerce Case is a container for multiple Checkouts and can be directly linked to one customer. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckoutActions or Payment Execution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param create_commerce_case_request [CreateCommerceCaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateCommerceCaseResponse]
    def create_commerce_case(merchant_id, create_commerce_case_request, opts = {})
      data, _status_code, _headers = create_commerce_case_with_http_info(merchant_id, create_commerce_case_request, opts)
      data
    end

    # Create a Commerce Case
    # This endpoint can be used to create a Commerce Case in combination with a Checkout and an Order. A Commerce Case is a container for multiple Checkouts and can be directly linked to one customer. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckoutActions or Payment Execution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param create_commerce_case_request [CreateCommerceCaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCommerceCaseResponse, Integer, Hash)>] CreateCommerceCaseResponse data, response status code and response headers
    def create_commerce_case_with_http_info(merchant_id, create_commerce_case_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommerceCaseApi.create_commerce_case ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CommerceCaseApi.create_commerce_case"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.create_commerce_case, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.create_commerce_case, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'create_commerce_case_request' is set
      if @api_client.config.client_side_validation && create_commerce_case_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_commerce_case_request' when calling CommerceCaseApi.create_commerce_case"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_commerce_case_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCommerceCaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommerceCaseApi.create_commerce_case",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommerceCaseApi#create_commerce_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Commerce Case Details
    # This endpoint can be used to get a specific Commerce Case and all linked Checkouts.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param [Hash] opts the optional parameters
    # @return [CommerceCaseResponse]
    def get_commerce_case(merchant_id, commerce_case_id, opts = {})
      data, _status_code, _headers = get_commerce_case_with_http_info(merchant_id, commerce_case_id, opts)
      data
    end

    # Get Commerce Case Details
    # This endpoint can be used to get a specific Commerce Case and all linked Checkouts.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommerceCaseResponse, Integer, Hash)>] CommerceCaseResponse data, response status code and response headers
    def get_commerce_case_with_http_info(merchant_id, commerce_case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommerceCaseApi.get_commerce_case ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CommerceCaseApi.get_commerce_case"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.get_commerce_case, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.get_commerce_case, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling CommerceCaseApi.get_commerce_case"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommerceCaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommerceCaseApi.get_commerce_case",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommerceCaseApi#get_commerce_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Commerce Cases based on Search Parameters
    # This endpoint will provide a list of Commerce Cases based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to load Items (Checkouts or Commerce-Cases, depending on the context) starting with 0. (default to 0)
    # @option opts [Integer] :size The number of Items (Checkouts or Commerce-Cases, depending on the context) loaded per page (default to 25)
    # @option opts [Time] :from_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. 
    # @option opts [Time] :to_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. 
    # @option opts [String] :commerce_case_id Unique identifier of a Commerce Case.
    # @option opts [String] :merchant_reference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes.
    # @option opts [String] :merchant_customer_id Unique identifier for the customer.
    # @option opts [Array<StatusCheckout>] :include_checkout_status Filter your results by Checkout status so that only Checkouts with the specified statuses are returned.
    # @option opts [Array<PaymentChannel>] :include_payment_channel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned.
    # @return [Array<CommerceCaseResponse>]
    def get_commerce_cases(merchant_id, opts = {})
      data, _status_code, _headers = get_commerce_cases_with_http_info(merchant_id, opts)
      data
    end

    # Get a list of Commerce Cases based on Search Parameters
    # This endpoint will provide a list of Commerce Cases based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The offset to load Items (Checkouts or Commerce-Cases, depending on the context) starting with 0. (default to 0)
    # @option opts [Integer] :size The number of Items (Checkouts or Commerce-Cases, depending on the context) loaded per page (default to 25)
    # @option opts [Time] :from_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system. 
    # @option opts [Time] :to_date Date and time in RFC3339 format after which Items (Checkouts or Commerce-Cases, depending on the context) should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system. 
    # @option opts [String] :commerce_case_id Unique identifier of a Commerce Case.
    # @option opts [String] :merchant_reference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes.
    # @option opts [String] :merchant_customer_id Unique identifier for the customer.
    # @option opts [Array<StatusCheckout>] :include_checkout_status Filter your results by Checkout status so that only Checkouts with the specified statuses are returned.
    # @option opts [Array<PaymentChannel>] :include_payment_channel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned.
    # @return [Array<(Array<CommerceCaseResponse>, Integer, Hash)>] Array<CommerceCaseResponse> data, response status code and response headers
    def get_commerce_cases_with_http_info(merchant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommerceCaseApi.get_commerce_cases ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CommerceCaseApi.get_commerce_cases"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.get_commerce_cases, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.get_commerce_cases, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CommerceCaseApi.get_commerce_cases, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling CommerceCaseApi.get_commerce_cases, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling CommerceCaseApi.get_commerce_cases, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'merchant_reference'].nil? && opts[:'merchant_reference'].to_s.length > 40
        fail ArgumentError, 'invalid value for "opts[:"merchant_reference"]" when calling CommerceCaseApi.get_commerce_cases, the character length must be smaller than or equal to 40.'
      end

      if @api_client.config.client_side_validation && !opts[:'merchant_customer_id'].nil? && opts[:'merchant_customer_id'].to_s.length > 20
        fail ArgumentError, 'invalid value for "opts[:"merchant_customer_id"]" when calling CommerceCaseApi.get_commerce_cases, the character length must be smaller than or equal to 20.'
      end

      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'commerceCaseId'] = opts[:'commerce_case_id'] if !opts[:'commerce_case_id'].nil?
      query_params[:'merchantReference'] = opts[:'merchant_reference'] if !opts[:'merchant_reference'].nil?
      query_params[:'merchantCustomerId'] = opts[:'merchant_customer_id'] if !opts[:'merchant_customer_id'].nil?
      query_params[:'includeCheckoutStatus'] = @api_client.build_collection_param(opts[:'include_checkout_status'], :multi) if !opts[:'include_checkout_status'].nil?
      query_params[:'includePaymentChannel'] = @api_client.build_collection_param(opts[:'include_payment_channel'], :multi) if !opts[:'include_payment_channel'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CommerceCaseResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommerceCaseApi.get_commerce_cases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommerceCaseApi#get_commerce_cases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify an existing Commerce Case.
    # This endpoint can be used to update or modify the customer object of a Commerce Case.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param patch_commerce_case_request [PatchCommerceCaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_commerce_case(merchant_id, commerce_case_id, patch_commerce_case_request, opts = {})
      update_commerce_case_with_http_info(merchant_id, commerce_case_id, patch_commerce_case_request, opts)
      nil
    end

    # Modify an existing Commerce Case.
    # This endpoint can be used to update or modify the customer object of a Commerce Case.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param patch_commerce_case_request [PatchCommerceCaseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_commerce_case_with_http_info(merchant_id, commerce_case_id, patch_commerce_case_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommerceCaseApi.update_commerce_case ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling CommerceCaseApi.update_commerce_case"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.update_commerce_case, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling CommerceCaseApi.update_commerce_case, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling CommerceCaseApi.update_commerce_case"
      end
      # verify the required parameter 'patch_commerce_case_request' is set
      if @api_client.config.client_side_validation && patch_commerce_case_request.nil?
        fail ArgumentError, "Missing the required parameter 'patch_commerce_case_request' when calling CommerceCaseApi.update_commerce_case"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_commerce_case_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommerceCaseApi.update_commerce_case",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommerceCaseApi#update_commerce_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
