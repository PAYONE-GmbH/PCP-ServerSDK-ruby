=begin
#Commerce Platform API

#RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 

The version of the OpenAPI document: 1.8.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module PCPServerSDK
  # Object containing the relevant information of a SEPA Direct Debit mandate for processing (mandatory fields in pain.008). Renamed from CreateMandateWithReturnUrl to ProcessingMandateInformation. 
  class ProcessingMandateInformation
    attr_accessor :bank_account_iban

    attr_accessor :recurrence_type

    # The unique identifier of the mandate
    attr_accessor :unique_mandate_reference

    # The date of signature of the mandate. Format YYYYMMDD
    attr_accessor :date_of_signature

    # Your unique creditor identifier.
    attr_accessor :creditor_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bank_account_iban' => :'bankAccountIban',
        :'recurrence_type' => :'recurrenceType',
        :'unique_mandate_reference' => :'uniqueMandateReference',
        :'date_of_signature' => :'dateOfSignature',
        :'creditor_id' => :'creditorId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bank_account_iban' => :'BankAccountInformation',
        :'recurrence_type' => :'MandateRecurrenceType',
        :'unique_mandate_reference' => :'String',
        :'date_of_signature' => :'String',
        :'creditor_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PCPServerSDK::ProcessingMandateInformation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PCPServerSDK::ProcessingMandateInformation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bank_account_iban')
        self.bank_account_iban = attributes[:'bank_account_iban']
      else
        self.bank_account_iban = nil
      end

      if attributes.key?(:'recurrence_type')
        self.recurrence_type = attributes[:'recurrence_type']
      else
        self.recurrence_type = nil
      end

      if attributes.key?(:'unique_mandate_reference')
        self.unique_mandate_reference = attributes[:'unique_mandate_reference']
      else
        self.unique_mandate_reference = nil
      end

      if attributes.key?(:'date_of_signature')
        self.date_of_signature = attributes[:'date_of_signature']
      else
        self.date_of_signature = nil
      end

      if attributes.key?(:'creditor_id')
        self.creditor_id = attributes[:'creditor_id']
      else
        self.creditor_id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @bank_account_iban.nil?
        invalid_properties.push('invalid value for "bank_account_iban", bank_account_iban cannot be nil.')
      end

      if @recurrence_type.nil?
        invalid_properties.push('invalid value for "recurrence_type", recurrence_type cannot be nil.')
      end

      if @unique_mandate_reference.nil?
        invalid_properties.push('invalid value for "unique_mandate_reference", unique_mandate_reference cannot be nil.')
      end

      if @unique_mandate_reference.to_s.length > 35
        invalid_properties.push('invalid value for "unique_mandate_reference", the character length must be smaller than or equal to 35.')
      end

      pattern = Regexp.new(/^[A-Za-z0-9\+\-\.()]{1,35}$/)
      if @unique_mandate_reference !~ pattern
        invalid_properties.push("invalid value for \"unique_mandate_reference\", must conform to the pattern #{pattern}.")
      end

      if @date_of_signature.nil?
        invalid_properties.push('invalid value for "date_of_signature", date_of_signature cannot be nil.')
      end

      if @date_of_signature.to_s.length > 8
        invalid_properties.push('invalid value for "date_of_signature", the character length must be smaller than or equal to 8.')
      end

      pattern = Regexp.new(/^((19|20|21)\d{6})?$/)
      if @date_of_signature !~ pattern
        invalid_properties.push("invalid value for \"date_of_signature\", must conform to the pattern #{pattern}.")
      end

      if @creditor_id.nil?
        invalid_properties.push('invalid value for "creditor_id", creditor_id cannot be nil.')
      end

      if @creditor_id.to_s.length > 31
        invalid_properties.push('invalid value for "creditor_id", the character length must be smaller than or equal to 31.')
      end

      pattern = Regexp.new(/^[A-Z]{2}[0-9]{2}[a-zA-Z0-9\+\?\/\-:\(\)\.,\']{1,31}$/)
      if @creditor_id !~ pattern
        invalid_properties.push("invalid value for \"creditor_id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @bank_account_iban.nil?
      return false if @recurrence_type.nil?
      return false if @unique_mandate_reference.nil?
      return false if @unique_mandate_reference.to_s.length > 35
      return false if @unique_mandate_reference !~ Regexp.new(/^[A-Za-z0-9\+\-\.()]{1,35}$/)
      return false if @date_of_signature.nil?
      return false if @date_of_signature.to_s.length > 8
      return false if @date_of_signature !~ Regexp.new(/^((19|20|21)\d{6})?$/)
      return false if @creditor_id.nil?
      return false if @creditor_id.to_s.length > 31
      return false if @creditor_id !~ Regexp.new(/^[A-Z]{2}[0-9]{2}[a-zA-Z0-9\+\?\/\-:\(\)\.,\']{1,31}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] unique_mandate_reference Value to be assigned
    def unique_mandate_reference=(unique_mandate_reference)
      if unique_mandate_reference.nil?
        fail ArgumentError, 'unique_mandate_reference cannot be nil'
      end

      if unique_mandate_reference.to_s.length > 35
        fail ArgumentError, 'invalid value for "unique_mandate_reference", the character length must be smaller than or equal to 35.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9\+\-\.()]{1,35}$/)
      if unique_mandate_reference !~ pattern
        fail ArgumentError, "invalid value for \"unique_mandate_reference\", must conform to the pattern #{pattern}."
      end

      @unique_mandate_reference = unique_mandate_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] date_of_signature Value to be assigned
    def date_of_signature=(date_of_signature)
      if date_of_signature.nil?
        fail ArgumentError, 'date_of_signature cannot be nil'
      end

      if date_of_signature.to_s.length > 8
        fail ArgumentError, 'invalid value for "date_of_signature", the character length must be smaller than or equal to 8.'
      end

      pattern = Regexp.new(/^((19|20|21)\d{6})?$/)
      if date_of_signature !~ pattern
        fail ArgumentError, "invalid value for \"date_of_signature\", must conform to the pattern #{pattern}."
      end

      @date_of_signature = date_of_signature
    end

    # Custom attribute writer method with validation
    # @param [Object] creditor_id Value to be assigned
    def creditor_id=(creditor_id)
      if creditor_id.nil?
        fail ArgumentError, 'creditor_id cannot be nil'
      end

      if creditor_id.to_s.length > 31
        fail ArgumentError, 'invalid value for "creditor_id", the character length must be smaller than or equal to 31.'
      end

      pattern = Regexp.new(/^[A-Z]{2}[0-9]{2}[a-zA-Z0-9\+\?\/\-:\(\)\.,\']{1,31}$/)
      if creditor_id !~ pattern
        fail ArgumentError, "invalid value for \"creditor_id\", must conform to the pattern #{pattern}."
      end

      @creditor_id = creditor_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bank_account_iban == o.bank_account_iban &&
          recurrence_type == o.recurrence_type &&
          unique_mandate_reference == o.unique_mandate_reference &&
          date_of_signature == o.date_of_signature &&
          creditor_id == o.creditor_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bank_account_iban, recurrence_type, unique_mandate_reference, date_of_signature, creditor_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PCPServerSDK.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
