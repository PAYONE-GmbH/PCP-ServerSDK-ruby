=begin
#Commerce Platform API

#RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 

The version of the OpenAPI document: 1.8.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module PCPServerSDK
  class PaymentExecutionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a Payment
    # This endpoint can be used to reverse the payment associated with this Checkout. The Cancel is only possible for the entire amount of the payment and not partial payments. OrderManagementActions will be impossible after using a PaymentExecution endpoint.  In the light of card payments, reversing an authorization that is not needed will prevent you from having to pay a fee/penalty for unused authorization requests. Whilst scheme regulations require that acquirers and PSPs support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore, there is no guarantee the authorization hold is released. The authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392). For other payment methods the cancellationReason is not mandatory but can be used for reporting and reconciliation purposes.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param cancel_payment_request [CancelPaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CancelPaymentResponse]
    def cancel_payment_execution(merchant_id, commerce_case_id, checkout_id, payment_execution_id, cancel_payment_request, opts = {})
      data, _status_code, _headers = cancel_payment_execution_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, cancel_payment_request, opts)
      data
    end

    # Cancel a Payment
    # This endpoint can be used to reverse the payment associated with this Checkout. The Cancel is only possible for the entire amount of the payment and not partial payments. OrderManagementActions will be impossible after using a PaymentExecution endpoint.  In the light of card payments, reversing an authorization that is not needed will prevent you from having to pay a fee/penalty for unused authorization requests. Whilst scheme regulations require that acquirers and PSPs support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore, there is no guarantee the authorization hold is released. The authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392). For other payment methods the cancellationReason is not mandatory but can be used for reporting and reconciliation purposes.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param cancel_payment_request [CancelPaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelPaymentResponse, Integer, Hash)>] CancelPaymentResponse data, response status code and response headers
    def cancel_payment_execution_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, cancel_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentExecutionApi.cancel_payment_execution ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentExecutionApi.cancel_payment_execution"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.cancel_payment_execution, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.cancel_payment_execution, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling PaymentExecutionApi.cancel_payment_execution"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentExecutionApi.cancel_payment_execution"
      end
      # verify the required parameter 'payment_execution_id' is set
      if @api_client.config.client_side_validation && payment_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_execution_id' when calling PaymentExecutionApi.cancel_payment_execution"
      end
      # verify the required parameter 'cancel_payment_request' is set
      if @api_client.config.client_side_validation && cancel_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'cancel_payment_request' when calling PaymentExecutionApi.cancel_payment_execution"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/cancel'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'paymentExecutionId' + '}', CGI.escape(payment_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cancel_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CancelPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentExecutionApi.cancel_payment_execution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentExecutionApi#cancel_payment_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Capture a Payment
    # This endpoint can be used to capture authorized amounts of a payment. The Capture can only be done for Checkouts with status COMPLETED, BILLED or CHARGEBACKED. OrderManagementActions will be impossible after using a PaymentExecution endpoint. It is possible to perform multiple partial captures by providing an amount that is lower than the total authorized amount.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392) if isFinal is set to true and the amount of the Capture is lower than the authorized amount. For other payment methods the cancellationReason is not mandatory in this case but can be used for reporting and reconciliation purposes.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param capture_payment_request [CapturePaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CapturePaymentResponse]
    def capture_payment_execution(merchant_id, commerce_case_id, checkout_id, payment_execution_id, capture_payment_request, opts = {})
      data, _status_code, _headers = capture_payment_execution_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, capture_payment_request, opts)
      data
    end

    # Capture a Payment
    # This endpoint can be used to capture authorized amounts of a payment. The Capture can only be done for Checkouts with status COMPLETED, BILLED or CHARGEBACKED. OrderManagementActions will be impossible after using a PaymentExecution endpoint. It is possible to perform multiple partial captures by providing an amount that is lower than the total authorized amount.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392) if isFinal is set to true and the amount of the Capture is lower than the authorized amount. For other payment methods the cancellationReason is not mandatory in this case but can be used for reporting and reconciliation purposes.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param capture_payment_request [CapturePaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapturePaymentResponse, Integer, Hash)>] CapturePaymentResponse data, response status code and response headers
    def capture_payment_execution_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, capture_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentExecutionApi.capture_payment_execution ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentExecutionApi.capture_payment_execution"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.capture_payment_execution, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.capture_payment_execution, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling PaymentExecutionApi.capture_payment_execution"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentExecutionApi.capture_payment_execution"
      end
      # verify the required parameter 'payment_execution_id' is set
      if @api_client.config.client_side_validation && payment_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_execution_id' when calling PaymentExecutionApi.capture_payment_execution"
      end
      # verify the required parameter 'capture_payment_request' is set
      if @api_client.config.client_side_validation && capture_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'capture_payment_request' when calling PaymentExecutionApi.capture_payment_execution"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/capture'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'paymentExecutionId' + '}', CGI.escape(payment_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capture_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CapturePaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentExecutionApi.capture_payment_execution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentExecutionApi#capture_payment_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete a Payment
    # For PAYONE Secured Installment (paymentProductId 3391) a two-step process is required. The first step is creating a Payment, the second step is completing it by calling this API endpoint. OrderManagementActions will be impossible after using a PaymentExecution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param complete_payment_request [CompletePaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CompletePaymentResponse]
    def complete_payment(merchant_id, commerce_case_id, checkout_id, payment_execution_id, complete_payment_request, opts = {})
      data, _status_code, _headers = complete_payment_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, complete_payment_request, opts)
      data
    end

    # Complete a Payment
    # For PAYONE Secured Installment (paymentProductId 3391) a two-step process is required. The first step is creating a Payment, the second step is completing it by calling this API endpoint. OrderManagementActions will be impossible after using a PaymentExecution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param complete_payment_request [CompletePaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompletePaymentResponse, Integer, Hash)>] CompletePaymentResponse data, response status code and response headers
    def complete_payment_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, complete_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentExecutionApi.complete_payment ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentExecutionApi.complete_payment"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.complete_payment, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.complete_payment, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling PaymentExecutionApi.complete_payment"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentExecutionApi.complete_payment"
      end
      # verify the required parameter 'payment_execution_id' is set
      if @api_client.config.client_side_validation && payment_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_execution_id' when calling PaymentExecutionApi.complete_payment"
      end
      # verify the required parameter 'complete_payment_request' is set
      if @api_client.config.client_side_validation && complete_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'complete_payment_request' when calling PaymentExecutionApi.complete_payment"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/complete'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'paymentExecutionId' + '}', CGI.escape(payment_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(complete_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CompletePaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentExecutionApi.complete_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentExecutionApi#complete_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Payment
    # This endpoint can be used to create a payment for a specific payment method. The amount of the payment cannot exceed the overall Checkout amount. OrderManagementActions will be impossible after using a PaymentExecution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_request [PaymentExecutionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreatePaymentResponse]
    def create_payment(merchant_id, commerce_case_id, checkout_id, payment_execution_request, opts = {})
      data, _status_code, _headers = create_payment_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_request, opts)
      data
    end

    # Create a Payment
    # This endpoint can be used to create a payment for a specific payment method. The amount of the payment cannot exceed the overall Checkout amount. OrderManagementActions will be impossible after using a PaymentExecution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_request [PaymentExecutionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePaymentResponse, Integer, Hash)>] CreatePaymentResponse data, response status code and response headers
    def create_payment_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentExecutionApi.create_payment ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentExecutionApi.create_payment"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.create_payment, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.create_payment, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling PaymentExecutionApi.create_payment"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentExecutionApi.create_payment"
      end
      # verify the required parameter 'payment_execution_request' is set
      if @api_client.config.client_side_validation && payment_execution_request.nil?
        fail ArgumentError, "Missing the required parameter 'payment_execution_request' when calling PaymentExecutionApi.create_payment"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payment_execution_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentExecutionApi.create_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentExecutionApi#create_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refund a Payment
    # This endpoint can be used to refund a payment for the associated Checkout. The Refund can only be done for Checkouts with status BILLED or CHARGEBACKED. OrderManagementActions will be impossible after using a PaymentExecution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param refund_request [RefundRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RefundPaymentResponse]
    def refund_payment_execution(merchant_id, commerce_case_id, checkout_id, payment_execution_id, refund_request, opts = {})
      data, _status_code, _headers = refund_payment_execution_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, refund_request, opts)
      data
    end

    # Refund a Payment
    # This endpoint can be used to refund a payment for the associated Checkout. The Refund can only be done for Checkouts with status BILLED or CHARGEBACKED. OrderManagementActions will be impossible after using a PaymentExecution endpoint.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param payment_execution_id [String] Unique identifier of a paymentExecution
    # @param refund_request [RefundRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RefundPaymentResponse, Integer, Hash)>] RefundPaymentResponse data, response status code and response headers
    def refund_payment_execution_with_http_info(merchant_id, commerce_case_id, checkout_id, payment_execution_id, refund_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentExecutionApi.refund_payment_execution ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentExecutionApi.refund_payment_execution"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.refund_payment_execution, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling PaymentExecutionApi.refund_payment_execution, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling PaymentExecutionApi.refund_payment_execution"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling PaymentExecutionApi.refund_payment_execution"
      end
      # verify the required parameter 'payment_execution_id' is set
      if @api_client.config.client_side_validation && payment_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_execution_id' when calling PaymentExecutionApi.refund_payment_execution"
      end
      # verify the required parameter 'refund_request' is set
      if @api_client.config.client_side_validation && refund_request.nil?
        fail ArgumentError, "Missing the required parameter 'refund_request' when calling PaymentExecutionApi.refund_payment_execution"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/payment-executions/{paymentExecutionId}/refund'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s)).sub('{' + 'paymentExecutionId' + '}', CGI.escape(payment_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(refund_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RefundPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentExecutionApi.refund_payment_execution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentExecutionApi#refund_payment_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
