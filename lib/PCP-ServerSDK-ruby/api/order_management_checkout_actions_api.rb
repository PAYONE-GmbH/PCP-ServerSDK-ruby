=begin
#Commerce Platform API

#RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 

The version of the OpenAPI document: 1.8.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module PCPServerSDK
  class OrderManagementCheckoutActionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Mark items of a Checkout as cancelled and automatically cancel the payment for the items
    # This endpoint can be used to mark items from a Checkout as cancelled and reverse the payment associated with this Checkout. The Cancel endpoint can be used to cancel a full or partial order.  The Cancel request will mark all or (for cancelType PARTIAL) the provided items as CANCELLED, and – in case of an existing authorization – will reverse the payment.  In the light of card payments, reversing an authorization that is not needed will prevent you from having to pay a fee/penalty for unused authorization requests. Whilst scheme regulations require that acquirers and PSPs support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore, there is no guarantee the authorization hold is released. The authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392). For other payment methods the cancellationReason is not mandatory but can be used for reporting and reconciliation purposes.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @option opts [CancelRequest] :cancel_request 
    # @return [CancelResponse]
    def cancel_order(merchant_id, commerce_case_id, checkout_id, opts = {})
      data, _status_code, _headers = cancel_order_with_http_info(merchant_id, commerce_case_id, checkout_id, opts)
      data
    end

    # Mark items of a Checkout as cancelled and automatically cancel the payment for the items
    # This endpoint can be used to mark items from a Checkout as cancelled and reverse the payment associated with this Checkout. The Cancel endpoint can be used to cancel a full or partial order.  The Cancel request will mark all or (for cancelType PARTIAL) the provided items as CANCELLED, and – in case of an existing authorization – will reverse the payment.  In the light of card payments, reversing an authorization that is not needed will prevent you from having to pay a fee/penalty for unused authorization requests. Whilst scheme regulations require that acquirers and PSPs support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore, there is no guarantee the authorization hold is released. The authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392). For other payment methods the cancellationReason is not mandatory but can be used for reporting and reconciliation purposes.
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @option opts [CancelRequest] :cancel_request 
    # @return [Array<(CancelResponse, Integer, Hash)>] CancelResponse data, response status code and response headers
    def cancel_order_with_http_info(merchant_id, commerce_case_id, checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderManagementCheckoutActionsApi.cancel_order ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling OrderManagementCheckoutActionsApi.cancel_order"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.cancel_order, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.cancel_order, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling OrderManagementCheckoutActionsApi.cancel_order"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling OrderManagementCheckoutActionsApi.cancel_order"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/cancel'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'cancel_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CancelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderManagementCheckoutActionsApi.cancel_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderManagementCheckoutActionsApi#cancel_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an Order that will automatially execute a Payment
    # This endpoint can be used to create an Order that automatically executes a payment for the respective Checkout.  The Order request requires items within the ShoppingCart and can be made for a partial or the entire ShoppingCart of a Checkout. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param order_request [OrderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrderResponse]
    def create_order(merchant_id, commerce_case_id, checkout_id, order_request, opts = {})
      data, _status_code, _headers = create_order_with_http_info(merchant_id, commerce_case_id, checkout_id, order_request, opts)
      data
    end

    # Creates an Order that will automatially execute a Payment
    # This endpoint can be used to create an Order that automatically executes a payment for the respective Checkout.  The Order request requires items within the ShoppingCart and can be made for a partial or the entire ShoppingCart of a Checkout. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param order_request [OrderRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderResponse, Integer, Hash)>] OrderResponse data, response status code and response headers
    def create_order_with_http_info(merchant_id, commerce_case_id, checkout_id, order_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderManagementCheckoutActionsApi.create_order ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling OrderManagementCheckoutActionsApi.create_order"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.create_order, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.create_order, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling OrderManagementCheckoutActionsApi.create_order"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling OrderManagementCheckoutActionsApi.create_order"
      end
      # verify the required parameter 'order_request' is set
      if @api_client.config.client_side_validation && order_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_request' when calling OrderManagementCheckoutActionsApi.create_order"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/order'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderManagementCheckoutActionsApi.create_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderManagementCheckoutActionsApi#create_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark items of a Checkout as delivered and automatically capture the payment for the items
    # This endpoint can be used to mark items from a Checkout as delivered and to automatically capture the payments for those items. The return can only be done for Checkouts with status COMPLETED, BILLED or CHARGEBACKED and the items have to be in the status ORDERED. If the payment has already been captured (in case of a SALE), the deliver request will only update the item status. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param deliver_request [DeliverRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DeliverResponse]
    def deliver_order(merchant_id, commerce_case_id, checkout_id, deliver_request, opts = {})
      data, _status_code, _headers = deliver_order_with_http_info(merchant_id, commerce_case_id, checkout_id, deliver_request, opts)
      data
    end

    # Mark items of a Checkout as delivered and automatically capture the payment for the items
    # This endpoint can be used to mark items from a Checkout as delivered and to automatically capture the payments for those items. The return can only be done for Checkouts with status COMPLETED, BILLED or CHARGEBACKED and the items have to be in the status ORDERED. If the payment has already been captured (in case of a SALE), the deliver request will only update the item status. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param deliver_request [DeliverRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeliverResponse, Integer, Hash)>] DeliverResponse data, response status code and response headers
    def deliver_order_with_http_info(merchant_id, commerce_case_id, checkout_id, deliver_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderManagementCheckoutActionsApi.deliver_order ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling OrderManagementCheckoutActionsApi.deliver_order"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.deliver_order, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.deliver_order, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling OrderManagementCheckoutActionsApi.deliver_order"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling OrderManagementCheckoutActionsApi.deliver_order"
      end
      # verify the required parameter 'deliver_request' is set
      if @api_client.config.client_side_validation && deliver_request.nil?
        fail ArgumentError, "Missing the required parameter 'deliver_request' when calling OrderManagementCheckoutActionsApi.deliver_order"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/deliver'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(deliver_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DeliverResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderManagementCheckoutActionsApi.deliver_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderManagementCheckoutActionsApi#deliver_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark items of a Checkout as returned and automatically refund the payment for the items
    # This endpoint can be used to mark items from a Checkout as returned and will automatically refund the payments for those items. The return can only be done for Checkouts with status BILLED or CHARGEBACKED and the items have to be in the status DELIVERED. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @option opts [ReturnRequest] :return_request 
    # @return [ReturnResponse]
    def return_order(merchant_id, commerce_case_id, checkout_id, opts = {})
      data, _status_code, _headers = return_order_with_http_info(merchant_id, commerce_case_id, checkout_id, opts)
      data
    end

    # Mark items of a Checkout as returned and automatically refund the payment for the items
    # This endpoint can be used to mark items from a Checkout as returned and will automatically refund the payments for those items. The return can only be done for Checkouts with status BILLED or CHARGEBACKED and the items have to be in the status DELIVERED. 
    # @param merchant_id [String] The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant.
    # @param commerce_case_id [String] Unique identifier of a Commerce Case.
    # @param checkout_id [String] Unique identifier of a Checkout
    # @param [Hash] opts the optional parameters
    # @option opts [ReturnRequest] :return_request 
    # @return [Array<(ReturnResponse, Integer, Hash)>] ReturnResponse data, response status code and response headers
    def return_order_with_http_info(merchant_id, commerce_case_id, checkout_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderManagementCheckoutActionsApi.return_order ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling OrderManagementCheckoutActionsApi.return_order"
      end
      if @api_client.config.client_side_validation && merchant_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.return_order, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && merchant_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "merchant_id" when calling OrderManagementCheckoutActionsApi.return_order, the character length must be great than or equal to 0.'
      end

      # verify the required parameter 'commerce_case_id' is set
      if @api_client.config.client_side_validation && commerce_case_id.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_case_id' when calling OrderManagementCheckoutActionsApi.return_order"
      end
      # verify the required parameter 'checkout_id' is set
      if @api_client.config.client_side_validation && checkout_id.nil?
        fail ArgumentError, "Missing the required parameter 'checkout_id' when calling OrderManagementCheckoutActionsApi.return_order"
      end
      # resource path
      local_var_path = '/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/return'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s)).sub('{' + 'commerceCaseId' + '}', CGI.escape(commerce_case_id.to_s)).sub('{' + 'checkoutId' + '}', CGI.escape(checkout_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'return_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ReturnResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"OrderManagementCheckoutActionsApi.return_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderManagementCheckoutActionsApi#return_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
